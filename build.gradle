/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to
 * https://docs.gradle.org/9.1.0/userguide/building_java_projects.html in the Gradle documentation.
 */

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.gradle.api.tasks.testing.logging.TestExceptionFormat


plugins {
    // Apply the application plugin to add support for building a CLI application in Java
    alias(libs.plugins.application)

    // Performs quality checks on your projectâ€™s Java source files using Checkstyle and generates reports from these
    // checks
    alias(libs.plugins.checkstyle)

    // Create fat/uber JARs, apply file transforms, and relocate packages for applications and libraries
    alias(libs.plugins.shadow)
}

repositories {
    // Use Maven Central for resolving dependencies
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing
    testImplementation libs.junit.jupiter
    testRuntimeOnly libs.junit.platform.launcher

    // This dependency is used by the application
    implementation libs.guava

    // Use Jetbrains' annotation processor
    compileOnly libs.jetbrains.annotations
    annotationProcessor libs.jetbrains.annotations
}

// Apply a specific Java toolchain to ease working on different environments
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application
    mainClass = 'arpa.home.nustudy.App'
}

run {
    // Enable assertions when executing Java code
    enableAssertions = true

    // Set standard input stream for the process executing the command
    standardInput = System.in
}

checkstyle {
    // Set version of the code quality tool to be used
    toolVersion = libs.versions.checkstyle.get()
}

tasks.withType(AbstractArchiveTask).configureEach {
    // Activating reproducible archives
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

tasks.named('test', Test) {
    // Use JUnit Platform for unit tests
    useJUnitPlatform()

    testLogging {
        // Set events to be logged
        events('passed', 'skipped', 'failed')

        // Set format to be used for logging test exceptions
        exceptionFormat = TestExceptionFormat.FULL
        // Whether output on standard out and standard error will be logged
        showStandardStreams = false
    }
}

tasks.named('shadowJar', ShadowJar) {
    // Remove all JARs and classes of dependencies that are not used by the project
    minimize()

    // Set base name of the archive
    archiveBaseName = 'NUStudy'
    // Unset the classifier attribute of the `ShadowJar` task to be 'all'
    archiveClassifier = ''
}
